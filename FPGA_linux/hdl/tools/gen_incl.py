"""
This file reads the original configuration file and generates processed .vh file.
Note that only macros are allowed in the original verilog file.
"""

from typing import List
import argparse
import os

NOTE = """///////////////////////////////////////////////////////////////////
// This file is generated by tools.
// Do not modify anything!!!
///////////////////////////////////////////////////////////////////
"""

def rm_blanks(lines: List[str]):
    ret = []
    for line in lines:
        if line=="":
            continue
        ret.append(line)
    return ret

def rm_comments(lines: List[str]):
    """
    Remove comments, only // style is supported.
    """
    ret = []
    for line in lines:
        if line.startswith("//"):
            continue
        idx = line.find("//")
        if idx > -1:
            ret.append(line[:idx])
        else:
            ret.append(line)
    return ret

def parse_macros(lines: List[str]):
    """
    Parse Macros from the file content. 
    The returned value is a dict with key-value pairs.
    """
    ret = {}
    for line in lines:
        if line.startswith("`define"):
            ls = line.split()
            if len(ls) == 2:
                k, v = ls[1], ""
            elif len(ls) == 3:
                k, v = ls[1], ls[2]
            else:
                raise ValueError(f"Invalid line {line}")
            ret[k] = v
    return ret

def handle_S(macros: dict):
    S = int(macros["S"])
    if S >= 6:
        macros.update({"__S_6": ""})
    if S >= 8:
        macros.update({"__S_8": ""})
    if S >= 10:
        macros.update({"__S_10": ""})
    if S >= 12:
        macros.update({"__S_12": ""})

def gen(fp: str, new_fp: str):
    with open(fp, mode="r", encoding="utf8") as f:
        content = f.read()
    # Process lines
    lines = content.split("\n")
    lines = rm_blanks(lines)
    lines = rm_comments(lines)
    # Parse macros
    macros = parse_macros(lines)
    # Handle macros
    handle_S(macros)
    # Write new macros into file
    with open(new_fp, mode="w", encoding="utf8") as f:
        f.write(NOTE)
        for k,v in macros.items():
            f.write(f"`define {k} {v}\n")

if __name__=="__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--ori_fp")
    parser.add_argument("--new_fp")
    args = parser.parse_args()

    if not os.path.exists(args.ori_fp):
        print(f"File {args.ori_fp} is not found.")
        exit(-1)
    if args.ori_fp == args.new_fp:
        print("The generated file can not be saved at the same location as the original file.")
        exit(-1)
    gen(args.ori_fp, args.new_fp)
